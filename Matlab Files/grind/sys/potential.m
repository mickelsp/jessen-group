%POTENTIAL   Create potentials
%   Another way to visualize the dynamics of a first-order system is 
%   based on the physical idea of potential energy (Strogatz, 1994).
%   The system moves downhill, equilibria are in a minimum. The landscape 
%   can be generated by solving the potential function of the model:
%   dx/dt=f(x)
%   transform this model to the potential equation:
%   -dV/dx=f(x)
%   The simulation of this model (initial condition=0) gives the potential plot.
%   The current state is often represented by a marble, but one should imagine
%   that this marble is heavily damped and sliding through a greasy substance 
%   (Strogatz, 1994).
%   This can also be calculated for 2D systems, but the interpretation seems 
%   difficult then.
%   
%
%   Usage:
%   POTENTIAL - creates potentials with full range and 50 points
%   POTENTIAL RANGE NPOINTS ONLY1D - sets range of Y-axis to RANGE and
%   uses NPOINTS for the calculations. If ONLY1D=1 then only one 
%   state variable is varied.
%
%   See also marbleplot, null, growths

%   Copyright 2012 WUR
%   Revision: 1.1.8 $ $Date: 15-Mar-2012 10:05:28 $
function [xs,pot] = potential(VRange, npoints, only2D)
global g_grind;
i_parcheck;
if nargin == 0
   VRange = [ - 1E30, 1E30];
else
   VRange = i_checkstr(VRange);
end;
if nargin < 2
   npoints = 50;
else
   npoints = i_checkstr(npoints);
end;
if nargin < 3
   only2D = 0;
else
   only2D = i_checkstr(only2D);
end;
if length(VRange) == 1
   VRange = [ - 1E30, VRange];
end;
if isempty(VRange) 
   VRange = [ - 1E30, 1E30];
end;
iX = i_getno(g_grind.xaxis.var);
if iX.isvar
   var1 = g_grind.xaxis.var;
   lim1 = g_grind.xaxis.lim;
   var2 = g_grind.yaxis.var;
   lim2 = g_grind.yaxis.lim;
else
   var1 = g_grind.yaxis.var;
   lim1 = g_grind.yaxis.lim;
   var2 = '';
   lim2 = [];
end;
potfun = 'curr_pot%d';
i = 0;
while exist([fullfile(grindpath,sprintf(potfun,i),'file') '.m'],'file')&&(i<10)
   i = i + 1;
end;
potfun = sprintf(potfun, i);
if only2D || (g_grind.statevars.dim == 1)
   i_makepotfun(var1, potfun);
   [x, V] = ode45(potfun, lim1, 0);
   if nargout == 0
      [H, new] = i_makefig('potent1');
      if new
         set(H, 'WindowButtonDown', 'i_callb(''mdown'')');
         set(H, 'WindowButtonMotionFcn', 'i_callb(''mmove'')');
      end;
      plot(x, V, g_grind.pen.pen, 'Color', g_grind.pen.color);
      xlabel(i_disptext(var1));
      ylabel('potential');
      if VRange(1) > -1E-29
         set(gca, 'ylim', VRange);
      end;
      set(gca, 'xlim', g_grind.xaxis.lim);
      i_plotdefaults(H);
   else
      xs = x;
      pot = V;
   end;
elseif isempty(i_varno(var1)) || isempty(i_varno(var2))
   errordlg('Can only have state variables on the axes')
   error('GRIND:potential:NoStatevars','Error in potential, no state variables on the axes');
else
   i_makepotfun(var2, potfun);
   %initial conditions in the y direction
   assignin('base', var1, 0);
   [X, V] = ode45(potfun, lim2, 0);
   V0 = interp1(X, V, lim2(1):(lim2(2) - lim2(1)) / (npoints - 1):lim2(2), 'cubic');
   i_makepotfun(var1);
   Vs = zeros(npoints, npoints);
   Xs = zeros(npoints, npoints);
   Ys = zeros(npoints, npoints);
   wb = waitbar(0, 'Calculating...');
   for i = 1:npoints
      waitbar(i / npoints, wb);
      y = lim2(1) + (i - 1) * (lim2(2)-lim2(1)) / (npoints-1);
      assignin('base', var2, y);
      [X, V] = ode45(potfun, lim1, V0(i));
      Ys(i, :) = y;
      Xs(i, :) = lim1(1):(lim1(2) - lim1(1)) / (npoints - 1):lim1(2);
      Vs(i, :) = interp1(X, V, Xs(i, :), 'cubic');
      for j = 1:npoints
         if Vs(i, j) > VRange(2)
            Vs(i, j) = NaN;
         elseif Vs(i, j) < VRange(1)
            Vs(i, j) = NaN;
         end;
      end;
   end;
   close(wb);
   H = figure(i_figno('potent3'));
   set(H, 'Name', 'Potentials surface');
   hold off;
   surf(Xs, Ys, Vs);
   xlabel(i_disptext(var1));
   ylabel(i_disptext(var2));
   zlabel('potential');
   shading flat;
   colorbar;
   if g_grind.statevars.dim > 2
      ti = ['Potentials valid for ' i_othervars(i_initvar, i_varno(var1), i_varno(var2))];
   else
      ti = 'Potentials';
   end;
   title(ti);
   figure (i_figno('potent2'));
   set(H, 'Name', 'Potentials contour');
   set(H, 'WindowButtonDown', 'i_callb(''mdown'')');
   set(H, 'WindowButtonMotionFcn', 'i_callb(''mmove'')');
   contourf(Xs, Ys, Vs, 50);
   title(ti);
   xlabel(i_disptext(var1));
   ylabel(i_disptext(var2));
   colorbar;
end;
clear(potfun);
delete([fullfile(grindpath, potfun) '.m']);
hold off;
